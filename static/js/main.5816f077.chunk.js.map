{"version":3,"sources":["components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["CardList","robots","Error","SearchBox","searchChange","className","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robo","name","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"+PAwBeA,EArBC,SAAC,GAAa,EAAZC,OAEb,MAAM,IAAIC,MAAM,WCUNC,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKC,UAAU,MAAf,SACI,uBACIA,UAAU,gCACVC,KAAK,SACLC,YAAY,gBACZC,SAAYJ,OCCbK,EARD,SAACC,GACX,OACI,qBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAmBC,OAAO,SAAjE,SACKJ,EAAMK,YCiBJC,E,kDAnBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAO,CACRC,UAAU,GAHA,E,qDAOlB,SAAkBC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAW,M,oBAG9B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,wDAEJG,KAAKX,MAAMK,a,GAhBEQ,aCmDbC,G,wDA5CX,aAAc,IAAD,8BACT,gBAYJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAZzC,EAAKZ,MAAQ,CACThB,OAAQ,GACR0B,YAAa,IAJR,E,qDAOb,WAAoB,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,MAAI,CAAC,EAAKZ,SAAS,CAACrB,OAAOiC,U,oBAO1C,WAAS,IAAD,EAC0Bb,KAAKJ,MAA5BhB,EADH,EACGA,OAAQ0B,EADX,EACWA,YACTQ,EAAiBlC,EAAOmC,QAAO,SAAAC,GACjC,OAAOA,EAAKC,KAAKC,cAAcC,SAASb,EAAYY,kBAExD,OAAsB,IAAlBtC,EAAOwC,OACA,4CAIH,sBAAKpC,UAAU,KAAf,UACI,oBAAIA,UAAW,KAAf,0BACA,cAAC,EAAD,CAAWD,aAAciB,KAAKI,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUxB,OAAQkC,e,GAjC5BZ,cCIHmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACL,cAAC,EAAD,IACCC,SAASC,eAAe,SAM7BX,M","file":"static/js/main.5816f077.chunk.js","sourcesContent":["import React from 'react'\nimport Card from './Card';\n\nconst CardList =({robots}) => {  \n   if (true){\n     throw new Error('Nooooo');\n   }  \n    return(\n        <div>\n          {\n              robots.map(user => {\n                return (\n                    <Card key= {user.id} \n                          id={user.id} \n                          name={user.name} \n                          email={user.email}\n                    />\n                );\n            })\n          }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return(\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--red bg-lighest-pink'\n                type='search'\n                placeholder='search robots'\n                onChange = {searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react'\n\nconst Scroll =(props) => {\n    return (\n        <div style={{overflowY:'scroll',border:'5px solid black', height:'800px' }}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state ={\n            hasError: false\n        }\n    }   \n\n    conponentDidCatch(error,info){\n        this.setState({hasError : true});\n    }\n\n    render(){\n        if (this.state.hasError){\n            return <h1>Oops. That is an error</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React,{Component} from 'react'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nimport './App.css';\n\nclass App extends Component {\n    constructor(){\n        super();\n        this.state = {\n            robots: [],\n            searchField: ''\n        }\n    }\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => [this.setState({robots:users})]);\n        \n    }\n    onSearchChange = (event) => {\n        this.setState({searchField: event.target.value});        \n    }\n\n    render(){\n        const {robots, searchField} = this.state;\n        const filteredRobots = robots.filter(robo => {\n            return robo.name.toLowerCase().includes(searchField.toLowerCase())\n        })\n        if (robots.length === 0){\n            return <h1>Loading...</h1>\n        }\n        else{\n            return(\n                <div className='tc'>\n                    <h1 className ='f1'>RoboFriends </h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots}/>\n                        </ErrorBoundary>\n                        \n                    </Scroll>                   \n                </div>\n            );\n        }\n        \n    }\n    \n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(  \n    <App/>,\n     document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}