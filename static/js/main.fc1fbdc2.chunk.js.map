{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","containers/App.js","action.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robo","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","err","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"6QAeeA,EAZH,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GACrB,OACI,sBAAKC,UAAU,kDAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,UACpD,gCACI,6BAAKL,IACL,4BAAIC,WCYLK,EAlBC,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACd,OACI,8BAEMA,EAAOC,KAAI,SAAAC,GACT,OACI,cAAC,EAAD,CACMP,GAAIO,EAAKP,GACTF,KAAMS,EAAKT,KACXC,MAAOQ,EAAKR,OAHNQ,EAAKP,UCMtBQ,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKR,UAAU,MAAf,SACI,uBACIA,UAAU,gCACVS,KAAK,SACLC,YAAY,gBACZC,SAAYH,OCCbI,EARD,SAACC,GACX,OACI,qBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAmBC,OAAO,SAAjE,SACKJ,EAAMK,YCiBJC,E,kDAnBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAO,CACRC,UAAU,GAHA,E,qDAOlB,SAAkBC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAW,M,oBAG9B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,wDAEJG,KAAKX,MAAMK,a,GAhBEQ,aCFfC,EAAsB,sBACtBC,EAAyB,yBACzBC,EAAyB,yBACzBC,EAAwB,wBCsB/BC,G,6KAEF,WACGP,KAAKX,MAAMmB,oB,oBAGd,WAAS,IAAD,EACmDR,KAAKX,MAArDoB,EADH,EACGA,YAAaC,EADhB,EACgBA,eAAe9B,EAD/B,EAC+BA,OAAO+B,EADtC,EACsCA,UAEpCC,EAAiBhC,EAAOiC,QAAO,SAAAC,GACjC,OAAOA,EAAKzC,KAAK0C,cAAcC,SAASP,EAAYM,kBAExD,OAAOJ,EAEP,4CAGA,sBAAKnC,UAAU,KAAf,UACI,oBAAIA,UAAW,KAAf,0BACA,cAAC,EAAD,CAAWQ,aAAc0B,IACzB,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAU9B,OAAQgC,e,GAtBpBV,cA+BHe,eA/CS,SAAArB,GACpB,MAAO,CACHa,YAAab,EAAMsB,aAAaT,YAChC7B,OAAOgB,EAAMuB,cAAcvC,OAC3B+B,UAAWf,EAAMuB,cAAcR,UAC/Bb,MAAOF,EAAMuB,cAAcrB,UAIR,SAACsB,GACxB,MAAO,CACHV,eAAgB,SAACW,GAAD,OAAWD,GCdJE,EDc4BD,EAAME,OAAOC,MCd/B,CACrCvC,KAAKkB,EACLsB,QAAQH,KAFkB,IAACA,GDevBd,gBAAiB,kBAAMY,GCVI,SAACA,GAChCA,EAAS,CAACnC,KAAKmB,IACfsB,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIV,EAAS,CAACnC,KAAKoB,EAAuBoB,QAAQK,OAC3DC,OAAM,SAAAC,GAAG,OAAIZ,EAAS,CAACnC,KAAKqB,EAAsBmB,QAAQO,cDwCpDf,CAA4CV,GE5C5C0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFRO,G,MAAqB,CACvBhC,YAAa,KAGXiC,EAAqB,CACvB/B,WAAU,EACV/B,OAAQ,GACRkB,MAAM,I,gBCEJ6C,GAFSC,yBAEKC,YAAgB,CAAC3B,aDCT,WAA0C,IAAzCtB,EAAwC,uDAAlC6C,EAAoBK,EAAc,uDAAP,GAC1D,OAAOA,EAAO7D,MACV,KAAKkB,EACD,OAAO4C,OAAOC,OAAO,GAAGpD,EAAO,CAACa,YAAYqC,EAAOrB,UACvD,QACI,OAAO7B,ICN+BuB,cDWrB,WAAyC,IAAxCvB,EAAuC,uDAAjC8C,EAAoBI,EAAa,uDAAN,GAC3D,OAAOA,EAAO7D,MACV,KAAKmB,EACD,OAAO2C,OAAOC,OAAO,GAAGpD,EAAO,CAACe,WAAU,IAC9C,KAAKN,EACD,OAAO0C,OAAOC,OAAO,GAAGpD,EAAO,CAAChB,OAAOkE,EAAOrB,QAAQd,WAAU,IACpE,KAAKL,EACG,OAAOyC,OAAOC,OAAO,GAAGpD,EAAO,CAACE,MAAMgD,EAAOrB,QAAQd,WAAU,IACvE,QACI,OAAOf,OClBbqD,EAAQC,YAAYP,EAAYQ,YAAgBC,MAEtDC,IAASC,OACL,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACK,cAAC,EAAD,MACQM,SAASC,eAAe,SAOzCvB,M","file":"static/js/main.fc1fbdc2.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css'\n\nconst Card =({name,email,id}) =>{    \n    return (\n        <div className='bg-light-pink dib br3 pa3 ma2 grow bw2 shadow-5'>           \n            <img src={`https://robohash.org/${id}?200x200`} alt='robot'/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react'\nimport Card from './Card';\n\nconst CardList =({robots}) => {    \n    return(\n        <div>\n          {\n              robots.map(user => {\n                return (\n                    <Card key= {user.id} \n                          id={user.id} \n                          name={user.name} \n                          email={user.email}\n                    />\n                );\n            })\n          }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return(\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--red bg-lighest-pink'\n                type='search'\n                placeholder='search robots'\n                onChange = {searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react'\n\nconst Scroll =(props) => {\n    return (\n        <div style={{overflowY:'scroll',border:'5px solid black', height:'800px' }}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state ={\n            hasError: false\n        }\n    }   \n\n    conponentDidCatch(error,info){\n        this.setState({hasError : true});\n    }\n\n    render(){\n        if (this.state.hasError){\n            return <h1>Oops. That is an error</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React,{Component} from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport {setSearchField,requestRobots} from '../action';\nimport './App.css';\n\nconst mapStateToProps = state =>{\n    return {\n        searchField: state.searchRobots.searchField,\n        robots:state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n    \n    componentDidMount(){\n       this.props.onRequestRobots();    \n    }   \n\n    render(){\n        const {searchField, onSearchChange,robots,isPending} = this.props;    \n        \n        const filteredRobots = robots.filter(robo => {\n            return robo.name.toLowerCase().includes(searchField.toLowerCase())\n        });\n        return isPending\n        ?\n        <h1>Loading...</h1>\n        :\n        (        \n        <div className='tc'>\n            <h1 className ='f1'>RoboFriends </h1>\n            <SearchBox searchChange={onSearchChange}/>\n            <Scroll>\n                <ErrorBoundary>\n                    <CardList robots={filteredRobots}/>\n                </ErrorBoundary>\n                \n            </Scroll>                   \n        </div>\n        ); \n    }    \n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD,\n        REQUEST_ROBOTS_PENDING,\n        REQUEST_ROBOTS_SUCCESS,\n        REQUEST_ROBOTS_FAILED} from './constants';\n\n\nexport const setSearchField = (text) => ({\n    type:CHANGE_SEARCH_FIELD,\n    payload:text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type:REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\n        .catch(err => dispatch({type:REQUEST_ROBOTS_FAILED,payload:err}));\n\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED} from './constants';\n\nconst initialStateSearch = {\n    searchField :''\n}\n\nconst initialStateRobots = {\n    isPending:false,\n    robots: [],\n    error:''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({},state, {searchField:action.payload});\n        default:\n            return state;\n    }\n\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) =>{\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({},state, {isPending:true});\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({},state, {robots:action.payload,isPending:false});\n        case REQUEST_ROBOTS_FAILED:\n                return Object.assign({},state, {error:action.payload,isPending:false});\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {applyMiddleware, createStore, combineReducers} from 'redux';\nimport './index.css';\nimport App from './containers/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport { searchRobots,requestRobots } from './reducers';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots,requestRobots})\n\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware));\n\nReactDOM.render( \n    <Provider store={store}>\n         <App />\n    </Provider>, document.getElementById('root')\n   \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}